"""
Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
"""
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from loguru import logger


class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(event, Message):
            user = event.from_user
            logger.info(
                f"üì• Message from {user.id} (@{user.username}): "
                f"'{event.text[:50] if event.text else 'No text'}'"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º callback –∑–∞–ø—Ä–æ—Å—ã
        elif isinstance(event, CallbackQuery):
            user = event.from_user
            logger.info(
                f"üîò Callback from {user.id} (@{user.username}): "
                f"'{event.data}'"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        try:
            result = await handler(event, data)
            return result
        except Exception as e:
            logger.error(f"‚ùå Error in handler: {e}")
            raise
