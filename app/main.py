"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""
import asyncio
import sys
from loguru import logger

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage

from app.config import settings
from app.handlers import setup_routers
from app.middlewares import setup_middlewares
from app.database import db


async def setup_bot() -> tuple[Bot, Dispatcher]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    try:
        storage = RedisStorage.from_url(settings.redis_url)
        logger.info("‚úÖ Redis storage connected successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to connect to Redis: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middlewares(dp)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    setup_routers(dp)
    
    return bot, dp


async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.create_tables()
        await db.update_bot_stats()
        logger.info("‚úÖ Database initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize database: {e}")
        sys.exit(1)
    
    bot_info = await bot.get_me()
    logger.info(f"üöÄ Bot @{bot_info.username} started successfully!")
    logger.info(f"üè† Environment: {settings.env}")


async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë Bot is shutting down...")
    await bot.session.close()


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        level=settings.log_level,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
               "<level>{level: <8}</level> | "
               "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
               "<level>{message}</level>",
        colorize=True
    )
    
    logger.info("üéØ Starting Aiogram Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot, dp = await setup_bot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup –∏ shutdown –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types()
        )
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Application terminated by user")
