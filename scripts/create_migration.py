#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def generate_migration_template(name: str, description: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    class_name = "".join(word.capitalize() for word in name.split("_")) + "Migration"
    
    template = f'''"""
{description}
"""
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncConnection
from loguru import logger

from app.database.migrations.base import Migration


class {class_name}(Migration):
    """{description}"""
    
    def get_version(self) -> str:
        return "{timestamp}"
    
    def get_description(self) -> str:
        return "{description}"
    
    async def check_can_apply(self, connection: AsyncConnection) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤/—Ç–∞–±–ª–∏—Ü
        return True
    
    async def upgrade(self, connection: AsyncConnection) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã
        logger.info("‚úÖ Applied migration: {name}")
    
    async def downgrade(self, connection: AsyncConnection) -> None:
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        logger.info("‚úÖ Reverted migration: {name}")
'''
    
    return template


def create_migration(name: str, description: str = None) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏"""
    if not description:
        description = f"Migration: {name.replace('_', ' ')}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{timestamp}_{name}.py"
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    migrations_dir = project_root / "app" / "database" / "migrations" / "versions"
    migrations_dir.mkdir(parents=True, exist_ok=True)
    
    # –ü—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_file = migrations_dir / filename
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if migration_file.exists():
        print(f"‚ùå Migration file already exists: {migration_file}")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    content = generate_migration_template(name, description)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(migration_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Created migration: {migration_file}")
    print(f"üìù Edit the file to add your migration logic")
    print(f"üîß Remember to implement:")
    print(f"   - check_can_apply() method")
    print(f"   - upgrade() method")
    print(f"   - downgrade() method (optional)")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("‚ùå Usage: python create_migration.py <migration_name> [description]")
        print("üìù Example: python create_migration.py add_user_phone 'Add phone column to users table'")
        sys.exit(1)
    
    migration_name = sys.argv[1]
    description = sys.argv[2] if len(sys.argv) > 2 else None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    if not migration_name.replace('_', '').isalnum():
        print("‚ùå Migration name should contain only letters, numbers and underscores")
        sys.exit(1)
    
    create_migration(migration_name, description)


if __name__ == "__main__":
    main() 