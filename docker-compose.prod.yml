services:
  # Telegram Bot Service (Production)
  bot:
    build:
      context: .
      target: production
    container_name: gpt_tersan_local_bot_bot_prod
    env_file:
      - .env.prod
    environment:
      - ENV=production
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Service (Production)
  redis:
    image: redis:7-alpine
    container_name: gpt_tersan_local_bot_redis_prod
    restart: always
    volumes:
      - redis_data:/data
    command: >
      sh -c "
      if [ -n \"$${REDIS_PASSWORD}\" ]; then
        redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass $${REDIS_PASSWORD}
      else
        redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
      fi
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$${REDIS_PASSWORD}\" ]; then
          redis-cli -a $${REDIS_PASSWORD} ping
        else
          redis-cli ping
        fi
        "
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # PostgreSQL Service (Production)
  postgres:
    image: postgres:15-alpine
    container_name: gpt_tersan_local_bot_postgres_prod
    env_file:
      - .env.prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  bot_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
